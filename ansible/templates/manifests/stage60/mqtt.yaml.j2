{%- if global.k8s.mqtt.service == 'mosquitto' -%}
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: mosquitto
  namespace: kube-system
spec:
  repo: https://k8s-at-home.com/charts/
  chart: mosquitto
  version: {{ versions.mosquitto.chart }}
  targetNamespace: smart-home
  valuesContent: |-
    resources:
      requests:
        memory: 32Mi
        cpu: 50m
      limits:
        memory: 32Mi
        cpu: 50m
    image:
      repository: {{ versions.mosquitto.image.repository }}
      tag: {{ versions.mosquitto.image.tag }}
    podAnnotations:
      prometheus.io/scrape: 'true'
      prometheus.io/port: '9234'
    additionalContainers:
      prometheus-exporter:
        name: mosquitto-exporter
        image: {{ versions.mosquitto.exporter.repository }}:{{ versions.mosquitto.exporter.tag }}
        imagePullPolicy: IfNotPresent
        env:
          - name: MQTT_USER
            value: {{ manifest.mosquitto.exporter.username }}
          - name: MQTT_PASS
            value: {{ manifest.mosquitto.exporter.password }}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - mosquitto
              topologyKey: kubernetes.io/hostname
    env:
      TZ: {{ global.timezone }}
    persistence:
      configinc:
        enabled: true
        type: custom
        volumeSpec:
          secret:
            secretName: mosquitto
      data:
        enabled: false
    service:
      main:
        enabled: true
    auth:
      enabled: true

{%- elif global.k8s.mqtt.service == 'broker-ha' -%}

---
apiVersion: v1
data:
  config: |
    discovery:
      domain: {{ manifest.broker_ha.discovery.domain }}
    mqtt:
      port: 1883
      user:
        {{ manifest.broker_ha.mqtt.user | to_nice_yaml | indent(8, false) }}
    cluster:
      config:
        secret_key: "{{ manifest.broker_ha.cluster.secret_key }}"
        probe_interval: 500
kind: ConfigMap
metadata:
  name: broker-ha
  namespace: smart-home

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: broker-ha
  namespace: smart-home
  labels:
    app.kubernetes.io/name: broker-ha
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: broker-ha
  template:
    metadata:
      labels:
        app.kubernetes.io/name: broker-ha
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      containers:
      - name: broker-ha
        image: {{ versions.broker_ha.repository }}:{{ versions.broker_ha.tag }}
        volumeMounts:
          - mountPath: /config
            name: config
        readinessProbe:
          failureThreshold: 2
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 1
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 70
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            memory: 32Mi
            cpu: 80m
          limits:
            memory: 32Mi
            cpu: 80m
      terminationGracePeriodSeconds: 60
      dnsPolicy: ClusterFirstWithHostNet
      volumes:
        - name: config
          configMap:
            name: broker-ha
            items:
              - key: config
                path: config.yaml
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - blocky-ha
              topologyKey: kubernetes.io/hostname

{%- endif %}
