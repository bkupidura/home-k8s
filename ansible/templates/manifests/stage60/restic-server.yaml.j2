---
apiVersion: v1
kind: Service
metadata:
  namespace: home-infra
  name: restic-server
  labels:
    app.kubernetes.io/name: restic-server
spec:
  selector:
    app.kubernetes.io/name: restic-server
  ports:
    - port: 8000
      name: restic-server

---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: restic-server
  namespace: home-infra
spec:
  entryPoints:
  - websecure
  routes:
  - kind: Rule
    match: Host(`restic.{{ global.domain }}`)
    services:
    - name: restic-server
      port: 8000
    middlewares:
      - name: lan-whitelist
        namespace: traefik-system
  tls:
    secretName: "{{ global.domain | replace('.', '-') }}-tls"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: home-infra
  name: restic-server
  labels:
    app.kubernetes.io/name: restic-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: restic-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: restic-server
      annotations:
        prometheus.io/port: "8000"
        prometheus.io/scrape: "true"
    spec:
      containers:
        - name: restic-server
          image: {{ versions.restic.server.repository }}:{{ versions.restic.server.tag }}
          command:
            - "/bin/sh"
            - "-ec"
            - |
              touch /data/.htaccess
{% for key, value in manifest.restic.server.users.items() %}
              create_user {{ key }} {{ value }}
{% endfor %}
              /entrypoint.sh
          env:
            - name: OPTIONS
              value: "--private-repos --prometheus --prometheus-no-auth"
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /data
          resources:
            requests:
              memory: 64Mi
              cpu: 200m
            limits:
              memory: 64Mi
              cpu: 200m
      volumes:
        - name: data
          hostPath:
            path: /srv/restic
            type: Directory
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: restic_controller
                  operator: In
                  values:
                    - "true"

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: restic-server-restic-restore
  namespace: home-infra
spec:
  concurrencyPolicy: Forbid
  schedule: "0 0 * * *"
  successfulJobsHistoryLimit: 1
  suspend: true
  jobTemplate:
    spec:
      template:
        spec:
          hostname: restic-server
          containers:
          - name: restore
            image: {{ versions.restic.repository }}:{{ versions.restic.tag }}
            args:
            - "--repo"
            - "{{ manifest.backup.restic.repo_restic }}"
            - "--verbose"
            - "restore"
            - "latest"
            - "--host"
            - "restic-server"
            - "--target"
            - "/data"
            volumeMounts:
            - mountPath: "/data"
              name: data
            envFrom:
            - secretRef:
                name: restic-secrets
          restartPolicy: OnFailure
          volumes:
            - name: data
              hostPath:
                path: /srv/restic
                type: Directory
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                    - key: restic_controller
                      operator: In
                      values:
                        - "true"

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: restic-server-restic-backup
  namespace: home-infra
spec:
  concurrencyPolicy: Forbid
  schedule: "00 03 * * *"
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          hostname: restic-server
          containers:
          - name: backup
            image: {{ versions.restic.repository }}:{{ versions.restic.tag }}
            command:
            - "/bin/sh"
            - "-ec"
            - |
              cd /data
              restic --repo "{{ manifest.backup.restic.repo_restic }}" --verbose backup .
            volumeMounts:
            - mountPath: "/data"
              name: data
            envFrom:
            - secretRef:
                name: restic-secrets
          restartPolicy: OnFailure
          volumes:
            - name: data
              hostPath:
                path: /srv/restic
                type: Directory
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                    - key: restic_controller
                      operator: In
                      values:
                        - "true"
