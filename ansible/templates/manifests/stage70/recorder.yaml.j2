---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: recorder
  namespace: smart-home
spec:
  accessModes:
  - {{ global.k8s.storage.class.default.mode }}
  resources:
    requests:
      storage: {{ manifest.recorder.volume.size }}
  storageClassName: {{ global.k8s.storage.class.default.name }}

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: recorder-cleanup
  namespace: smart-home
spec:
  concurrencyPolicy: Forbid
  schedule: "15 6,18 * * *"
  suspend: false
  jobTemplate:
    spec:
      template:
        spec:
          volumes:
            - name: recorder-data
              persistentVolumeClaim:
                claimName: recorder
          containers:
          - name: cleanup
            image: {{ manifest.versions.ubuntu.repository }}:{{ manifest.versions.ubuntu.tag }}
            command:
            - "/bin/sh"
            - "-ec"
            - |
              find /data -type f -mtime +7 -delete
              find /data -mindepth 1 -type d -empty -delete
            volumeMounts:
            - mountPath: "/data"
              name: recorder-data
          restartPolicy: OnFailure
          affinity:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: app.kubernetes.io/name
                        operator: In
                        values:
                          - recorder
                  topologyKey: kubernetes.io/hostname

---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: recorder
  namespace: smart-home
spec:
  entryPoints:
    - websecure
  routes:
  - match: Host(`recorder.{{ global.domain }}`)
    kind: Rule
    services:
      - name: recorder
        port: 8080
    middlewares:
      - name: lan-whitelist
        namespace: traefik-system
      - name: auth-authelia
        namespace: traefik-system
  tls:
    secretName: "{{ global.domain | replace('.', '-') }}-tls"

---
apiVersion: v1
kind: Service
metadata:
  name: recorder
  namespace: smart-home
  labels:
    app.kubernetes.io/name: recorder
spec:
  type: ClusterIP
  publishNotReadyAddresses: false
  ports:
    - name: recorder
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app.kubernetes.io/name: recorder

---
apiVersion: v1
data:
  config: |
    mqtt:
      topic: recorder
      server: mqtt.smart-home:1883
      user: recorder
    ssh:
      user: recorder
      key: /secret/id_rsa
    upload:
      workers: 4
      timeout: 60
      max_errors: 30
    record:
      workers: 4
      burst_overlap: 2
      input_args:
        "rtsp_transport": "tcp"
    convert:
      workers: 1
      input_args:
        "f": "concat"
        "vaapi_device": "/dev/dri/renderD128"
        "hwaccel": "vaapi"
        "safe": "0"
      output_args:
        "c:a": "copy"
        "c:v": "h264_vaapi"
        "preset": "veryfast"
        "vf": "format=nv12|vaapi,hwupload"
kind: ConfigMap
metadata:
  name: recorder
  namespace: smart-home

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: recorder
  namespace: smart-home
  labels:
    app.kubernetes.io/name: recorder
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: recorder
  template:
    metadata:
      labels:
        app.kubernetes.io/name: recorder
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      containers:
        - name: recorder
          image: {{ manifest.versions.recorder.repository }}:{{ manifest.versions.recorder.tag }}
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: 128Mi
            limits:
              memory: 256Mi
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /secret
              name: id-rsa
            - mountPath: /config
              name: config
            - name: dev-dri-renderd128
              mountPath: /dev/dri/renderD128
          securityContext:
            privileged: true
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          env:
            - name: TZ
              value: {{ global.timezone }}
            - name: MQTT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: recorder
                  key: mqtt_password
            - name: SSH_SERVER
              valueFrom:
                secretKeyRef:
                  name: recorder
                  key: ssh_server
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: recorder
        - name: id-rsa
          secret:
            secretName: recorder
            defaultMode: 0400
            items:
              - key: id_rsa
                path: id_rsa
        - name: config
          configMap:
            name: recorder
            items:
              - key: config
                path: config.yaml
        - name: dev-dri-renderd128
          hostPath:
            path: /dev/dri/renderD128
      terminationGracePeriodSeconds: 5
      nodeSelector:
        video_processing: "true"
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - frigate
              topologyKey: kubernetes.io/hostname
