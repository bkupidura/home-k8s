---
- name: Gather facts
  hosts:
    - k8s_master
    - k8s_master_primary
  gather_facts: yes

- name: Configure watchdog
  hosts:
    - k8s_master_primary
    - k8s_master
  tasks:
    - name: Configure watchdog
      vars:
        module: "{{ watchdog.module }}"
        device: "{{ watchdog.device | default('/dev/watchdog') }}"
        interval: "{{ watchdog.interval | default(10) }}"
        realtime: "{{ watchdog.realtime | default('yes') }}"
      include_tasks: tasks/configure_watchdog.yaml
    - name: Create k3s health check file
      vars:
        create:
          health-check:
            dst: /usr/sbin/k3s-health.sh
            src: ../templates/k3s-health.sh
            permission: "0755"
      include_tasks: tasks/custom_files.yaml
    - name: Add k3s healthcheck
      cron:
        name: k3s-health
        minute: "*"
        hour: "*"
        job: "/usr/sbin/k3s-health.sh"
      become: true

- name: Configre k8s master primary (k3s)
  hosts: k8s_master_primary
  tasks:
    - block:
      - fail:
          msg: "Only one node can be primary"
        when: groups['k8s_master_primary'] | length > 1

      - name: Get primary interface IP
        set_fact:
          primary_ip: "{{ hostvars[inventory_hostname]['ansible_' + os.primary_interface].ipv4.address }}"

      - name: Prepare K3s exec env
        set_fact:
          k3s_exec: "server {{ k3s.args | join(' ') }} --node-ip {{ primary_ip }} --bind-address {{ primary_ip }} --advertise-address {{ primary_ip }} --cluster-init"

      - name: Add labels to exec env
        set_fact:
          k3s_exec: "{{ k3s_exec }} --node-label {{ item.key }}={{ item.value }}"
        when: k3s.labels is defined
        with_dict: "{{ k3s.labels }}"

      - name: Install K3s
        vars:
          env: 
            INSTALL_K3S_VERSION: "{{ k3s.version }}"
            INSTALL_K3S_EXEC: "{{ k3s_exec }}"
        include_tasks: tasks/install_k3s.yaml

      - name: Cat k3s token
        command: cat /var/lib/rancher/k3s/server/token
        register: cat_token
        become: true

      - name: Set k3s token
        set_fact:
          k3s:
            token: "{{ cat_token.stdout }}"
        when: k3s.token is not defined

      - fail:
          msg: "Unknown k3s token!"
        when: k3s.token is not defined

      when:
      - operation is defined
      - operation == 'deploy'

    - name: Fetch kube-config
      fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: ../../kube-config.yaml
        flat: true
      become: true

- name: Configre k8s master (k3s)
  hosts: k8s_master
  serial: 1
  gather_facts: yes
  tasks:
    - block:
      - name: Get primary master IP
        set_fact:
          primary_node_ip: "{{ item.value['ansible_' + item.value.os.primary_interface].ipv4.address }}"
        with_dict: "{{ hostvars }}"
        when:
          - primary_node_ip is not defined
          - '"k8s_master_primary" in item.value.group_names'

      - fail:
          msg: "Unknown primary_node_ip"
        when: primary_node_ip is not defined

      - name: Get primary interface IP
        set_fact:
          primary_ip: "{{ hostvars[inventory_hostname]['ansible_' + os.primary_interface].ipv4.address }}"

      - name: Prepare K3s exec env
        set_fact:
          k3s_exec: "server {{ k3s.args | join(' ') }} --node-ip {{ primary_ip }} --bind-address {{ primary_ip }} --advertise-address {{ primary_ip }} --server https://{{ primary_node_ip }}:6443"

      - name: Add labels to exec env
        set_fact:
          k3s_exec: "{{ k3s_exec }} --node-label {{ item.key }}={{ item.value }}"
        when: k3s.labels is defined
        with_dict: "{{ k3s.labels }}"

      - name: Discover token
        set_fact:
          token: "{{ item.value.k3s.token }}"
        with_dict: "{{ hostvars }}"
        when: 
          - token is not defined
          - '"k8s_master_primary" in item.value.group_names'

      - fail:
          msg: "Unknown k3s token!"
        when: token is not defined

      - name: Install K3s
        vars:
          env:
            INSTALL_K3S_VERSION: "{{ k3s.version }}"
            INSTALL_K3S_EXEC: "{{ k3s_exec }}"
            K3S_TOKEN: "{{ token }}"
        include_tasks: tasks/install_k3s.yaml

      when:
      - operation is defined
      - operation == 'deploy'

- name: Configure watchdog
  hosts:
    - k8s_master_primary
    - k8s_master
  tasks:
    - name: Configure watchdog
      vars:
        module: "{{ watchdog.module }}"
        device: "{{ watchdog.device | default('/dev/watchdog') }}"
        interval: "{{ watchdog.interval | default(10) }}"
        realtime: "{{ watchdog.realtime | default('yes') }}"
        k3s_health: true
      include_tasks: tasks/configure_watchdog.yaml

- name: Add stale PODs cleanup
  hosts:
    - k8s_master_primary
    - k8s_master
  tasks:
    - name: Create k3s stale PODs cleanup script
      vars:
        create:
          stale-pod:
            dst: /usr/sbin/k3s-stale-pod.sh
            src: ../templates/k3s-stale-pod.sh
            permission: "0755"
      include_tasks: tasks/custom_files.yaml
    - name: Add k3s PODs cleanup script
      cron:
        name: k3s-stale-pod
        minute: "*/15"
        hour: "*"
        job: "/usr/sbin/k3s-stale-pod.sh"
      become: true
