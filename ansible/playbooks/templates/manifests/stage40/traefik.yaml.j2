---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: traefik
  namespace: kube-system
spec:
  repo: https://helm.traefik.io/traefik
  chart: traefik
  version: {{ manifest.versions.traefik.chart }}
  targetNamespace: traefik-system
  valuesContent: |-
    resources:
      requests:
        cpu: 50m
        memory: 32Mi
      limits:
        cpu: 100m
        memory: 128Mi
    image:
      name: {{ manifest.versions.traefik.image.repository }}
      tag: {{ manifest.versions.traefik.image.tag }}
    env:
      - name: TZ
        value: {{ global.timezone }}
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - traefik
            topologyKey: kubernetes.io/hostname
    deployment:
      enabled: true
      replicas: 2
      podAnnotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9100'
    persistence:
      enabled: false
    additionalArguments:
      - --accesslog
      - --serversTransport.insecureSkipVerify=true
      - --log
      - --log.level=INFO
      - --metrics.prometheus=true
      - --providers.kubernetescrd.allowCrossNamespace=true
    ports:
      traefik:
        expose: false
      web:
        expose: true
      websecure:
        expose: true
    ingressRoute:
      dashboard:
        enabled: false
    service:
      spec:
        loadBalancerIP: "{{ global.vips[2].ip }}"
        externalTrafficPolicy: Local

---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: basic-auth
  namespace: traefik-system
spec:
  basicAuth:
    secret: traefik-htaccess

---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: x-forwarded-proto-https
  namespace: traefik-system
spec:
  headers:
    customRequestHeaders:
      X-Forwarded-Proto: "https"

---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard
  namespace: traefik-system
spec:
  entryPoints:
    - websecure
  routes:
  - match: Host(`traefik.{{ global.domain }}`)
    kind: Rule
    services:
      - name: api@internal
        kind: TraefikService
    middlewares:
      - name: basic-auth
        namespace: traefik-system
  tls:
    secretName: "{{ global.domain | replace('.', '-') }}-tls"
